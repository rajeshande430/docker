1.	evolution of containers
2.	creating tomcat8 Virtual machine vs docker 
3.	docker run + docker client  + docker deamon - - local registry && remote registry that is docker hub 
4.	what happens during docker run
5.	what is inside a docker image
6.	how to create a docker image through docker file (set of instructions)
7. 	what are the commands used for docker image
8.	docker installation | docker group permission
9.	docker inspect image - to see ROOTFS - layers
10.	what is inside a docker container
11.	who creates a writable layers
12.	storage drivers types
13.	which storage driver is best | when running toomany instruction ?
14.	docker file CMD & ENTRYPOINT, when does CMD execute
15.	CMD can be over written while creating the container ? how
16.	ENTRYPOINT ?
17.	How to get inside a docker container ?
18.	docker container life cycle ? start|stop etc






docker installation on ubuntu
https://docs.docker.com/install/linux/docker-ce/ubuntu/
		sudo apt-get update
		sudo apt-get install \apt-transport-https \ca-certificates \curl \gnupg-agent \software-properties-common -y
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) \stable"
		sudo apt-get update
		sudo apt-get install docker-ce docker-ce-cli containerd.io
		sudo usermod -aG docker ubuntu
logout from the ECS machine
login again
docker --version
docker info

DOCKER IMAGE BUILD FOR SPRING-PETCLINIC USING 2 METHODS 
	1.	using ubuntu image from docker hub
	2.	using java image from docker hub
	
---------------------------------------------------------------------------------------------------
INSTALLING UBUNTU MACHINE && OPENJDK FROM DOCKERHUB && SPRINGPETCLINIC APPLICATION
---------------------------------------------------------------------------------------------------
--------------->	https://qt-s3-new-testing.s3-us-west-2.amazonaws.com/spring-petclinic.jar
--------------->	https://qt-s3-new-testing.s3-us-west-2.amazonaws.com/gameoflife.war
mkdir docker
cd docker
vi dockerfile

			FROM ubuntu
			RUN apt-get update && apt-get install openjdk-8-jdk
			ADD https://qt-s3-new-testing.s3-us-west-2.amazonaws.com/spring-petclinic.jar /spring-petclinic.jar
			EXPOSE 8080
			CMD ["java", "-jar", "/spring-petclinic.jar"]

			docker image build -t spc:ubuntu1 docker
			docker image list
			docker container run --name springpetclinic -p 8081:8080 -d spc:ubuntu1
										or
			docker container run --name springpetclinic -P -d spc:ubuntu1
			docker ps -a
			docker container list -a
			docker container exec -it <containerid> <shellterminal-/bin/bash>

-t 	= tag with a name
-d 	= run in the background
-p 	= portforwarding to a specific IP address
-P 	= portforwarding to which ever port is free
-it = Interactive mode, mostly used to login to the container

	
---------------------------------------------------------------------------------------------------
INSTALLING TOMCAT MACHINE && DEPLOYING GAMEOFLIFE APPLICATION
---------------------------------------------------------------------------------------------------
mkdir docker
cd docker
vi dockerfile
			FROM tomcat
			ADD https://qt-s3-new-testing.s3-us-west-2.amazonaws.com/gameoflife.war /gameoflife.war
			EXPOSE 8080
			CMD ["cp", "/gameoflife.war", "/usr/local/tomcat/webapps"]
								
			docker image build -t goflife:tomcat docker
			docker image list
			docker container run --name gameoflife -p 8081:8080 -d goflife:tomcat
										or
			docker container run --name gameoflife -P -d goflife:tomcat
			docker ps -a
			docker container list -a
			docker container exec -it <containerid> <shellterminal-/bin/bash>

docker image --help 
	Commands:
	  build       Build an image from a Dockerfile
	  history     Show the history of an image
	  import      Import the contents from a tarball to create a filesystem image
	  inspect     Display detailed information on one or more images
	  load        Load an image from a tar archive or STDIN
	  ls          List images
	  prune       Remove unused images
	  pull        Pull an image or a repository from a registry
	  push        Push an image or a repository to a registry
	  rm          Remove one or more images
	  save        Save one or more images to a tar archive (streamed to STDOUT by default)
	  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE

docker container --help
	Commands:
	  attach      Attach local standard input, output, and error streams to a running container
	  commit      Create a new image from a container's changes
	  cp          Copy files/folders between a container and the local filesystem
	  create      Create a new container
	  diff        Inspect changes to files or directories on a container's filesystem
	  exec        Run a command in a running container
	  export      Export a container's filesystem as a tar archive
	  inspect     Display detailed information on one or more containers
	  kill        Kill one or more running containers
	  logs        Fetch the logs of a container
	  ls          List containers
	  pause       Pause all processes within one or more containers
	  port        List port mappings or a specific mapping for the container
	  prune       Remove all stopped containers
	  rename      Rename a container
	  restart     Restart one or more containers
	  rm          Remove one or more containers
	  run         Run a command in a new container
	  start       Start one or more stopped containers
	  stats       Display a live stream of container(s) resource usage statistics
	  stop        Stop one or more running containers
	  top         Display the running processes of a container
	  unpause     Unpause all processes within one or more containers
	  update      Update configuration of one or more containers
	  wait        Block until one or more containers stop, then print their exit codes

remove the container 
docker rm -f <containerid>
	



